[tool.poetry]
name = "tetrika-junior"
version = "0.1.0"
description = "Решения тестовых заданий для Tetrika"
authors = ["Your Name <your.email@example.com>"]
packages = [
    { include = "task1" },
    { include = "task2" },
    { include = "task3" }
]

[tool.poetry.dependencies]
python = "^3.12"
beautifulsoup4 = "^4.12.3"
requests = "^2.31.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.2"
ruff = "^0.3.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff.lint]
# Включаем все правила по умолчанию
select = ["E", "F", "W", "I", "N", "UP", "ANN", "S", "BLE", "FBT", "B", "C4", "DTZ", "T10", "EM", "ISC", "ICN", "G", "INP", "PIE", "T20", "PYI", "PT", "Q", "RSE", "RET", "SLF", "SIM", "TID", "TCH", "ARG", "PTH", "ERA", "PD", "PGH", "PL", "TRY", "RUF"]

# Игнорируем некоторые правила
ignore = [
    # Аннотации типов
    "ANN002",  # Missing type annotation for *args
    "ANN003",  # Missing type annotation for **kwargs
    "ANN201",  # Missing return type annotation
    "ANN202",  # Missing return type annotation for private function
    "ANN204",  # Missing return type annotation for special method
    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed
    
    # Сообщения об ошибках
    "EM102",   # Exception must not use an f-string literal
    "TRY003",  # Long messages outside the exception class
    
    # Стиль тестов
    "PT009",   # Use a regular assert instead of unittest-style assertion
    "PT027",   # Use pytest.raises instead of unittest-style assertRaises
    
    # Кириллические символы
    "RUF001",  # String contains ambiguous unicode characters
    
    # Длина строк
    "E501",    # Line too long
    
    # Использование pathlib
    "PTH107",  # os.remove should be replaced by Path.unlink
    "PTH110",  # os.path.exists should be replaced by Path.exists
    "PTH123",  # open() should be replaced by Path.open()
    
    # Прочее
    "T201",    # Print found (разрешаем print в скриптах)
    "PLR2004", # Magic value used in comparison
    "RET504",  # Unnecessary assignment before return
]

[tool.ruff]
# Длина строки
line-length = 120

# Целевая версия Python
target-version = "py312"

[tool.ruff.format]
# Используем двойные кавычки
quote-style = "double"
# Добавляем запятую в конце списков
indent-style = "space"

[tool.ruff.lint.isort]
# Настройки импортов
combine-as-imports = true
force-wrap-aliases = true
known-first-party = ["task1", "task2", "task3"]

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true
suppress-none-returning = true

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"
multiline-quotes = "double"

[tool.ruff.lint.mccabe]
max-complexity = 15 